/*
 * UInt - Unsigned Integer class
 * Copyright (c) 2015 Gary Hammock
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package gujo;  // Gary's Unsigned Java Objects.

/**
 * This class seeks to implement the unsigned int object that was
 * (wrongly) excluded from the Java language.
 *  
 * @author Gary Hammock, PE
 * @since 2015-03-08
 * @version 1.0.0
 */
public final class UInt extends Number implements Comparable<UInt> {

    /**
     * A UID Generated by Eclipse.  (Required to extend java.lang.Number).
     */
    private static final long serialVersionUID = 677544056055698658L;

    /******************************************************
    **                   Constructors                    **
    ******************************************************/
    
    /**
     * Empty constructor.
     */
    public UInt () {
        _value = 0x00;
    }
    
    /**
     * Initializer constructor using a byte primitive.
     * 
     * @param value The 8-bit value to use as the initial value.
     */
    public UInt (byte value) {
        // Note that the parameter is promoted to an integer.
        this._storeSignedInteger((int)value);
    }
    
    /**
     * Initializer constructor using a short integer primitive.
     * 
     * @param value The 16-bit value to use as the initial value.
     */
    public UInt (short value) {
        // Note that the parameter is promoted to an integer.
        this._storeSignedInteger((int)value);
    }
    
    /**
     * Initializer constructor using a integer primitive.
     * 
     * @param value The 32-bit value to use as the initial value.
     */
    public UInt (int value) {
        this._storeSignedInteger(value);
    }

    /**
     * Initializer constructor using a long integer primitive.
     * 
     * @param value The 64-bit value to use as the initial value.
     */
    public UInt (long value) {
        _value = (long)(value & MAX_VALUE);
    }

    /******************************************************
    **               Accessors / Mutators                **
    ******************************************************/

    /**
     * Returns an 8-bit demoted value of the unsigned integer.
     * 
     * @return An 8-bit byte primitive.
     */
    public byte byteValue () {
        return (byte)(_value & 0xff);
    }

    /**
     * Retrive a 16-bit primitive type with the value.
     * 
     * @return A 16-bit short integer of the unsigned integer's value.
     */
    public short shortValue () {
        return (short)(_value & 0xffff);
    }
    
    /**
     * Returns the 32-bit promoted value of the unsigned integer.
     * 
     * @return A 32-bit integer primitive of the value.
     */
    public int intValue () {
        return (int)(_value & MAX_VALUE);
    }

    /**
     * Return a 64-bit promoted value of the unsigned integer.
     * 
     * @return A 64-bit integer primitive of the value.
     */
    public long longValue () {
        return _value;
    }
    
    /**
     * Return a single-precision promoted float value of the unsigned integer.
     * 
     * @return A float primitive of the value.
     */
    public float floatValue () {
        return (float)_value;
    }
    
    /**
     * Return a double-precision promoted float value of the unsigned integer.
     * 
     * @return A double primitive of the value.
     */
    public double doubleValue () {
        return (double)_value;
    }
    
    /**
     * Retrieve the value of the unsigned integer as a string.
     * 
     * @return A string representing the object's value.
     */
    public String toString () {
        return Long.toString(_value);
    }
    
    /**
     * Retrieve the value of the unsigned integer as a hex string.
     * 
     * @return A string of hexadecimal characters representing
     *         the object's value.
     */
    public String hexString () {
        return Long.toHexString(_value);
    }
    
    /**
     * Retrieve the hash code of the UInt object.
     */
    public int hashCode () {
        return Long.valueOf(_value).hashCode();
    }
    
    /**
     * Set the value of the unsigned integer object to a given value.
     * 
     * @param value The value that is to be assigned to the object. 
     */
    public void assign (byte value) {
        this._storeSignedInteger((int)value);
    }
    
    /**
     * Set the value of the unsigned integer object to a given value.
     * 
     * @param value The value that is to be assigned to the object. 
     */
    public void assign (short value) {
        this._storeSignedInteger((int)value);
    }
    
    /**
     * Set the value of the unsigned integer object to a given value.
     * 
     * @param value The value that is to be assigned to the object. 
     */
    public void assign (int value) {
        this._storeSignedInteger(value);
    }
    
    /**
     * Set the value of the unsigned integer object to a given value.
     * 
     * @param value The value that is to be assigned to the object. 
     */
    public void assign (long value) {
        _value = (_value & MAX_VALUE);
    }
    
    /**
     * Returns a UInt instance representing the specified integer value.
     * 
     * @param input A given integer value.
     * @return A UInt object representing the input integer.
     */
    public static UInt valueOf (int input) {
        return new UInt(input);
    }
    
    /**
     * Compare two UInt objects for equivalence.
     * 
     * @param toCompare The RHS object that is to be compared to
     *                  the calling UInt object.
     * @return true if the two objects are equal, false otherwise.
     */
    public boolean equals (Object toCompare) {
        if (this == toCompare)
            return true;
        else if (toCompare instanceof UInt) {
            if ((_value & MAX_VALUE) == (((UInt)toCompare)._value & MAX_VALUE))
                return true;
            else
                return false;
        }
        else if ((Long.valueOf(toCompare.toString()).longValue() & MAX_VALUE)
                == (_value & MAX_VALUE))
            return true;
        else
            return false;
    }
    
    /**
     * Compare the value of a caller to another UInt object's value.
     * 
     * @param anotherInt The UInt object whose value is to be compared.
     * @return A value of 0 if the values of the two UInts are equivalent;
     *         a value less than 0 if the calling object is less than the
     *         compared object; or a value greater than 0 if the caller is
     *         greater than the compared object.
     */
    public int compareTo (UInt anotherInt) {
        if (_value < anotherInt._value)
            return -1;
        else if (_value == anotherInt._value)
            return 0;
        else
            return 1;
    }
    
    /**
     * Compares two UInt objects numerically.
     *
     * @param x The first UInt to compare.
     * @param y The second UInt to compare.
     * @return The value 0 if x == y; a value less than 0 if x < y;
     *         and a value greater than 0 if x > y
     */
    public static int compare (UInt x, UInt y) {
        return (int)(x._value - y._value);
    }
    
    /**
     * Reverse the bits in a given integer.  For example:
     *   0xa9 (169) [10101001] becomes 0x95 (149) [10010101]).
     *   
     * @param input The value that is to be reversed.
     * @return A UInt object containing the reversed word.
     */
    public static UInt reverse (Object input) {
        UInt output = new UInt();
        
        output._value = Long.valueOf(input.toString()).longValue();
        output._value &= MAX_VALUE;
        
        output._value = (short)(((output._value >>> 1) & 0x55555555)
                              | ((output._value & 0x55555555) << 1));
        
        output._value = (short)(((output._value >>> 2) & 0x33333333)
                              | ((output._value & 0x33333333) << 2));
        
        output._value = (short)(((output._value >>> 4) & 0x0f0f0f0f)
                              | ((output._value & 0x0f0f0f0f) << 4));
        
        return output;
        
    }  // End method reverse().
    
    /**
     * Reverse the bits in the calling UInt object.
     * 
     * @return The reversed word.
     */
    public UInt reverse () {
        return UInt.reverse(this);
    }
    
    /**
     * Reverse the bytes of a given Object (to convert endianness for example).
     * 
     * @param input The object whose bytes are to be reversed.
     * @return A Uint object containing the byte reversed value.
     */
    public static UInt reverseBytes (Object input) {
        UInt output = new UInt();
        
        output._value = Long.valueOf(input.toString()).longValue();
        output._value = Long.reverseBytes(output._value);
        output._value >>>= 32;
        output._value &= MAX_VALUE;
        
        return output;
    }
    
    /**
     * Reverse the bytes of the calling UInt object.
     * 
     * @return The byte-reversed word.
     */
    public UInt reverseBytes () {
        return UInt.reverse(this);
    }
    
    /**
     * Retrieve the complement (not) value of the UInt object.
     * 
     * @param input The value whose complement is desired.
     * @return The negated/complemented UInt.
     */
    public static UInt not (Object input) {
        UInt output = new UInt ();
        
        output._value = ~(Long.valueOf(input.toString()).longValue());
        output._value &= MAX_VALUE;

        return output;
        
    }  // End static method not(input);
    
    /**
     * Complement/negate the calling UInt object.
     * 
     * @return The complemented UInt.
     */
    public UInt not () {
        return UInt.not(this);
    }
    
    /**
     * Perform a bit-wise AND operation on two UInt objects.
     * 
     * @param x The LHS object of the AND operation.
     * @param y The RHS object of the AND operation.
     * @return The result of the bit-wise AND operation.
     */
    public static UInt and (UInt x, UInt y) {
        UInt output = new UInt ();
        
        output._value = (long)((x._value & y._value) & MAX_VALUE);
        
        return output;
    }
    
    /**
     * Perform a bit-wise AND operation with the caller and a
     * given UInt object.
     * 
     * @param input The UInt object that is to be AND-ed with the caller.
     * @return The result of the bit-wise AND.
     */
    public UInt and (UInt input) {
        return UInt.and(this, input);
    }
    
    /**
     * Perform a bit-wise OR operation on two UInt objects.
     * 
     * @param x The LHS object of the OR operation.
     * @param y The RHS object of the OR operation.
     * @return The result of the bit-wise OR operation.
     */
    public static UInt or (UInt x, UInt y) {
        UInt output = new UInt ();
        
        output._value = (long)((x._value | y._value) & MAX_VALUE);
        
        return output;
    }
    
    /**
     * Perform a bit-wise OR operation with the caller and an input UInt.
     * 
     * @param input The UInt object that is to be OR-ed with the caller.
     * @return The result of the bit-wise OR operation.
     */
    public UInt or (UInt input) {
        return UInt.or(this, input);
    }
    
    /**
     * Perform a bit-wise XOR operation on two UInt objects.
     * 
     * @param x The LHS object of the XOR operation.
     * @param y The RHS object of the XOR operation.
     * @return The result of the bit-wise XOR operation.
     */
    public static UInt xor (UInt x, UInt y) {
        UInt output = new UInt ();
        
        output._value = (long)((x._value ^ y._value) & MAX_VALUE);
        
        return output;
    }
    
    /**
     * Perform a bit-wise XOR operation with the caller and an input UInt.
     * 
     * @param input The UInt object that is to be XOR-ed with the caller.
     * @return The result of the bit-wise XOR operation.
     */
    public UInt xor (UInt input) {
        return UInt.xor(this, input);
    }
    
    /**
     * Left shift the UInt object by a given number of positions.
     * 
     * @param positions The number of bits to shift [0, 32].
     * @return A new UInt object with the shifted value.
     */
    public UInt leftShift (int positions) {
        
        // Force a negative input to output the current value
        // as though it were invalid.
        if (positions < 0)
            return new UInt(_value);
        
        // Anything that is greater than 32 positions will always result
        // in shifting all bits out of the word leaving a value of 0x00000000.
        if (positions > SIZE)
            return new UInt();
        
        UInt output = new UInt(_value);
        output._value <<= positions;
        
        output._value &= MAX_VALUE;
        
        return output;
        
    }  // End method leftShift().
    
    /**
     * Right shift the UInt object by a given number of positions.
     * 
     * @param positions The number of bits to shift [0, 32].
     * @return A new UInt object with the shifted value.
     */
    public UInt rightShift (int positions) {
        
        // Force a negative input to output the current value
        // as though it were invalid.
        if (positions < 0)
            return new UInt(_value);
        
        // Anything that is greater than 8 positions will always result
        // in shifting all bits out of the word leaving a value of 0x00000000.
        if (positions > SIZE)
            return new UInt();
        
        UInt output = new UInt(_value);
        output._value >>>= positions;
        
        output._value &= MAX_VALUE;
        
        return output;
        
    }  // End method rightShift().
    
    /**
     * Left circular shift the UInt object by a given number of positions.
     * 
     * @param positions The number of bits to shift [0, 32].
     * @return A new UInt object with the shifted value.
     */
    public UInt leftCircularShift (int positions) {
        
        // Force a negative input to output the current value
        // as though it were invalid.
        if (positions < 0)
            return new UInt(_value);
        
        positions %= SIZE;
        
        UInt output = new UInt(_value);
        output._value = (long)((_value << positions)
                       | (_value >>> (SIZE - positions)));
        
        output._value &= MAX_VALUE;
        
        return output;
        
    }  // End method leftShift().
    
    /**
     * Right circular shift the UInt object by a given number of positions.
     * 
     * @param positions The number of bits to shift [0, 32].
     * @return A new UInt object with the shifted value.
     */
    public UInt rightCircularShift (int positions) {
        
        // Force a negative input to output the current value
        // as though it were invalid.
        if (positions < 0)
            return new UInt(_value);
        
        positions %= SIZE;
        
        UInt output = new UInt(_value);
        output._value = (long)((_value >>> positions)
                       | (_value << (SIZE - positions)));
        
        output._value &= MAX_VALUE;
        
        return output;
        
    }  // End method rightShift().
    
    /******************************************************
    **            Public Members / Fields                **
    ******************************************************/
    
    /**
     * The maximum value that can be represented by the UInt object.
     */
    public static final long MAX_VALUE = 0xffffffff;
    
    /**
     * The minimum value that can be represented by the UInt object.
     */
    public static final long MIN_VALUE = 0x00;
    
    /**
     * The number of bits that make up the represented unsigned integer.
     */
    public static final short SIZE = 32;
    
    public static final Class<UInt> TYPE = UInt.class; 
      
    /******************************************************
    **                 Private Members                   **
    ******************************************************/
    
    /**
     * The internal value of the unsigned integer object.
     */
    private long _value;
    
    /******************************************************
    **                 Private Methods                   **
    ******************************************************/
    
    /**
     * Given an integer primitive (can be a casted primitive) store the
     * value into the internal _value member, adjusting for signed values.
     * 
     * @param value The signed 32-bit integer primitive that is to be stored.
     */
    private void _storeSignedInteger (int value) {
        if (value < MIN_VALUE) {
            _value = (long)(value & 0x7fffffff) | 0x80000000;
        }
        else
            _value = value;
    }
    
}  // End class UInt.
